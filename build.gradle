import groovy.time.TimeCategory
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group 'ads-praktikum'
version '1.0-SNAPSHOT'

subprojects {
	apply plugin: 'java'
	group 'ads-praktikum'
	version '1.0-SNAPSHOT'

	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		implementation("junit:junit:4.13")
		testImplementation("junit:junit:4.13")
		testImplementation("org.junit.platform:junit-platform-launcher:1.7.0")
		testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.0")
		testImplementation("org.junit.vintage:junit-vintage-engine:5.7.0")
	}
	test {
		useJUnitPlatform()
	}
}

//source: https://gist.github.com/lwasyl/f5b2b4ebe9e348ebbd8ee4cb995f8362
subprojects {
	tasks.withType(Test) {
		testLogging {
			// set options for log level LIFECYCLE
			events TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
			showExceptions true
			showCauses true
			showStackTraces true

			// set options for log level DEBUG and INFO
			debug {
				events TestLogEvent.STARTED,
						TestLogEvent.FAILED,
						TestLogEvent.PASSED,
						TestLogEvent.SKIPPED,
						TestLogEvent.STANDARD_ERROR,
						TestLogEvent.STANDARD_OUT
				exceptionFormat TestExceptionFormat.FULL
			}
			info.events = debug.events
			info.exceptionFormat = debug.exceptionFormat

			afterSuite { desc, result ->
				if (!desc.parent) { // will match the outermost suite
					def output = "Results: ${result.resultType} " +
							"(" +
							"${result.testCount} tests, " +
							"${result.successfulTestCount} successes, " +
							"${result.failedTestCount} failures, " +
							"${result.skippedTestCount} skipped" +
							") " +
							"in ${TimeCategory.minus(new Date(result.endTime), new Date(result.startTime))}"
					def startItem = '|  ', endItem = '  |'
					def repeatLength = startItem.length() + output.length() + endItem.length()
					println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
				}
			}
		}
	}
}


